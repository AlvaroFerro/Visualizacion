library(shiny)
library(shiny)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot"),
tags$a()
)
)
))
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot"),
tags$a()
)
)
))
tags$a
tags$a()
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
install.packages("shinydashboard")
library(shinydashboard)
install.packages("shinydashboardPlus")
library(shinydashboard)
shiny::runApp('dashboard')
runApp()
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
shiny::runApp('dashboard')
shiny::runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
library(shinyjs)
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
shiny::runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
library(ggplot2)
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
source('~/.active-rstudio-document', echo=TRUE)
iris %>%
select(Sepal.Length, Sepal.Width) %>%
kmeans(4)
names(iris)
ggplot(iris, aes(x=Sepal.Lenght, y=Sepal.Width, color=as.factor(4))) +geom_point()
data(iris)
ggplot(iris, aes(x=Sepal.Lenght, y=Sepal.Width, color=as.factor(4))) +geom_point()
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color=as.factor(4))) +geom_point()
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color=4) +geom_point()
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color=4) +geom_point()
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color=4)) +geom_point()
runApp('dashboard')
runApp('dashboard')
iris %>% select('Sepal.Length', 'Sepal.Width') %>% kmeans(4)
km <- iris %>% select('Sepal.Length', 'Sepal.Width') %>% kmeans(4)
km$cluster
runApp('dashboard')
shiny::runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
shiny::runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
Sesion <- GET('https://min-api.cryptocompare.com/data/price?fsym=BTC&tsyms=USD,JPY,EUR')
library(httr)
Sesion <- GET('https://min-api.cryptocompare.com/data/price?fsym=BTC&tsyms=USD,JPY,EUR')
Sesion <- GET('https://min-api.cryptocompare.com/data/price?fsym=BTC&tsyms=USD,JPY,EUR')
sesion <- GET('https://min-api.cryptocompare.com/data/price?fsym=BTC&tsyms=USD,JPY,EUR')
sesion$status_code
names(sesion)
sesion$content
sesion <- GET('https://min-api.cryptocompare.com/data/pricemulti?fsyms=ETH,DASH&tsyms=BTC,USD,EUR&api_key=3a337e6b55620a6e302864894446c47bfe7ae0be1dc4d96d6a706ae3df528afc')
sesion$status_code
names(sesion)
sesion$content
library(jsonlite)
fromJSON(sesion)
fromJSON(sesion$content)
url <- 'https://min-api.cryptocompare.com/data/pricemulti?fsyms=ETH,DASH&tsyms=BTC,USD,EUR&api_key=3a337e6b55620a6e302864894446c47bfe7ae0be1dc4d96d6a706ae3df528afc'
fromJSON(sesion$content)
fromJSON(url)
df <- fromJSON(url)
View(df)
View(df)
as.data.frame(df)
install.packages("devtools")
devtools::install_github("blairj09/cryptor")
library(cryptor)
exchanges <- get_exchanges()
exchanges
head(get_coins())
get_api_limit()
get_price()
get_price('BTC', 'USD')
get_price(get_exchanges()$coin, 'USD')
exchanges$market
exchanges$coin
get_price(exchanges$coin, 'USD')
get_price(c(exchanges$coin), 'USD')
exchanges$coin[2]
exchanges$coin[55]
get_price(exchanges$coin[55], 'USD')
get_price(exchanges$coin[1:55], 'USD')
get_price(exchanges$coin['BTC'], 'USD')
get_price(exchanges$coin == 'BTC', 'USD')
get_price('BTC', 'USD')
get_price('BTC', 'USD')
get_price('BTC', 'USD')
get_price('BTC', 'USD')
get_price(c('BTC', 'ETH', 'XRP', 'EOS', 'Litecoin'), 'USD')
get_price(c('BTC', 'ETH', 'XRP', 'EOS', 'LTC'), 'USD')
get_price(c('BTC', 'ETH', 'XRP', 'EOS', 'LTC'), c('USD', 'EUR', 'JPY'))
as.data.frame(get_price(c('BTC', 'ETH', 'XRP', 'EOS', 'LTC'), c('USD', 'EUR', 'JPY')))
as.data.frame(get_price(c('BTC', 'ETH', 'XRP', 'EOS', 'LTC'), 'EUR'))
z <- as.data.frame(get_price(c('BTC', 'ETH', 'XRP', 'EOS', 'LTC'), 'EUR'))
library(ggplot2)
ggplot(z) + geom_point(aes(price, fromsymbol))
ggplot(z) + geom_point(aes(fromsymbol, price))
ggplot(z) + geom_point(aes(fromsymbol, price)) + geom_smooth()
ggplot(z) + geom_point(aes(fromsymbol, price)) + geom_smooth(aes(fromsymbol, price))
get_historical_price('BTC')
get_historical_price('BTC', 'EUR')
get_historical_price('BTC', 'EUR', all_data = T)
url <- 'https://min-api.cryptocompare.com/data/histoday?fsym=BTC&tsym=USD&limit=10&api_key=3a337e6b55620a6e302864894446c47bfe7ae0be1dc4d96d6a706ae3df528afc'
df <- fromJSON(url)
as.data.frame(df)
View(df)
View(df)
url <- 'https://min-api.cryptocompare.com/data/histoday?fsym=BTC&tsym=USD&limit=100&api_key=3a337e6b55620a6e302864894446c47bfe7ae0be1dc4d96d6a706ae3df528afc'
df <- fromJSON(url)
as.data.frame(df)
get_historical_price('BTC', 'EUR', all_data = T)
url <- 'https://min-api.cryptocompare.com/data/histoday?fsym=BTC&tsym=USD&limit=30&aggregate=3&e=CCCAGG&api_key=3a337e6b55620a6e302864894446c47bfe7ae0be1dc4d96d6a706ae3df528afc'
df <- fromJSON(url)
as.data.frame(df)
View(df)
View(df)
get_historical_price('BTC', 'USD', all_data = T)
get_historical_price('BTC', 'USD', all_data = T, aggregate = 'e')
get_historical_price('BTC', 'USD', all_data = T, aggregate = 3)
df2 <- get_historical_price('BTC', 'USD', all_data = T, aggregate = 3)
View(df2)
View(df2)
ggplot(df2) + geom_point(aes(time, close)) + geom_smooth(aes(time, close))
ggplot(df2) + geom_point(aes(time, close)) + geom_smooth(aes(time, close)) + geom_contour()
ggplot(df2) + geom_point(aes(time, close)) + geom_smooth(aes(time, close)) + geom_contour(aes(time, close))
ggplot(df2) + geom_point(aes(time, close)) + geom_smooth(aes(time, close)) + geom_contour(aes(time, close, open))
ggplot(df2) + geom_point(aes(time, close)) + geom_smooth(aes(time, close)) + geom_contour(aes(time, close, low))
df2 <- get_historical_price('BTC', 'USD', all_data = T, aggregate = 5)
as.data.frame(get_price(c('BTC', 'ETH', 'XRP', 'EOS', 'LTC'), 'EUR'))
get_historical_price('BTC', 'USD', all_data = T, aggregate = 5)
get_historical_price('BTC', 'USD', all_data = T, aggregate = 1)
get_historical_price('BTC', 'USD', all_data = T, aggregate = 30)
get_historical_price('BTC', 'USD', all_data = T, aggregate = 2)
get_historical_price('BTC', 'USD', all_data = T, aggregate = 1)
get_historical_price('BTC', 'USD', all_data = T, aggregate = 3)
get_historical_price('BTC', 'USD', all_data = T, aggregate = 2)
BC <- GET('https://api.blockchain.info/stats')
BC$status_code
BC$url
BC$content
BC$times
BC <- GET('https://api.blockchain.info/charts/transactions-per-second?timespan=5weeks&rollingAverage=8hours&format=json')
BC$start
BC <- 'https://api.blockchain.info/charts/transactions-per-second?timespan=5weeks&rollingAverage=8hours&format=json'
fromJSON(BC)
as.data.frame(fromJSON(BC))
BC <- 'https://api.blockchain.info/stats'
as.data.frame(fromJSON(BC))
GET('https://api.blockchain.info/charts/transactions-per-second?timespan=5weeks&rollingAverage=8hours&format=json')
fromJSON(GET('https://api.blockchain.info/charts/transactions-per-second?timespan=5weeks&rollingAverage=8hours&format=json'))
block <- GET('https://api.blockchain.info/charts/transactions-per-second?timespan=5weeks&rollingAverage=8hours&format=json')
block$headers$`content-type`
names(block)
text_contet <- content(block, as = 'text', encoding = 'UTF-8')
text_content()
text_contet
text_contet %>% fromJSON()
block <- GET('https://api.blockchain.info/charts/total_bitcoins?timespan=5weeks&rollingAverage=8hours&format=json')
block$headers$`content-type`
names(block)
text_contet <- content(block, as = 'text', encoding = 'UTF-8')
text_contet %>% fromJSON()
install.packages("highcharter")
library(highcharter)
highchart(mtcars)
hchart(density(mtcars$mpg), type = 'area', color = 'red', name = 'MPG')
hchart(density(mtcars$mpg, mtcars$cyl), type = 'area', color = 'red', name = 'MPG')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
#Todo lo que se escriba aque se va a completar en la ui en la parte de abajo de ui htmlvideo
#Se pueden devolver todas las cosas que se quieran
#Para devolver muchas cosas se tiene que crear una lista si o si
list(
tags$head(tags$script(type="text/javascript", src = "baseUrl = 'https://widgets.cryptocompare.com/';var scripts = document.getElementsByTagName('script');var embedder = scripts[ scripts.length - 1 ];(function (){var appName = encodeURIComponent(window.location.hostname);if(appName==''){appName='local';}var s = document.createElement('script');s.type = 'text/javascript';s.async = true;var theUrl = baseUrl+'serve/v1/coin/chart?fsym=BTC&tsym=USD';s.src = theUrl + ( theUrl.indexOf('?') >= 0 ? '&' : '?') + 'app=' + appName;embedder.parentNode.appendChild(s);})();"))
#tags$head(tags$script(HTML("function changeColor(x,y){x.style.backgroundColor = y;}")))
)
runApp('html')
runApp('html')
runApp('html')
tags$script('aaaaa')
tags$head('aaaa')
tags$head(tags$script('aaaaa'))
HTML('aaaa aaaa')
runApp('html')
#Todo lo que se escriba aque se va a completar en la ui en la parte de abajo de ui htmlvideo
#Se pueden devolver todas las cosas que se quieran
#Para devolver muchas cosas se tiene que crear una lista si o si
list(
#tags$head(tags$script(type = "text/javascript", "(function (){baseUrl = 'https://widgets.cryptocompare.com/';var scripts = document.getElementsByTagName('script');var embedder = scripts[ scripts.length - 1 ];var appName = encodeURIComponent(window.location.hostname);if(appName==''){appName='local';}var s = document.createElement('script');s.type = 'text/javascript';s.async = true;var theUrl = baseUrl+'serve/v1/coin/chart?fsym=BTC&tsym=USD';s.src = theUrl + ( theUrl.indexOf('?') >= 0 ? '&' : '?') + 'app=' + appName;embedder.parentNode.appendChild(s);})();"))
#tags$head(tags$script(HTML("function changeColor(x,y){x.style.backgroundColor = y;}")))
tags$script(type = 'text/javascript', "baseUrl = 'https://widgets.cryptocompare.com/';
var scripts = document.getElementsByTagName('script');
var embedder = scripts[ scripts.length - 1 ];
(function (){
var appName = encodeURIComponent(window.location.hostname);
if(appName==''){appName='local';}
var s = document.createElement('script');
s.type = 'text/javascript';
s.async = true;
var theUrl = baseUrl+'serve/v1/coin/chart?fsym=BTC&tsym=USD';
s.src = theUrl + ( theUrl.indexOf('?') >= 0 ? '&' : '?') + 'app=' + appName;
embedder.parentNode.appendChild(s);
})();")
)
#Todo lo que se escriba aque se va a completar en la ui en la parte de abajo de ui htmlvideo
#Se pueden devolver todas las cosas que se quieran
#Para devolver muchas cosas se tiene que crear una lista si o si
list(
#tags$head(tags$script(type = "text/javascript", "(function (){baseUrl = 'https://widgets.cryptocompare.com/';var scripts = document.getElementsByTagName('script');var embedder = scripts[ scripts.length - 1 ];var appName = encodeURIComponent(window.location.hostname);if(appName==''){appName='local';}var s = document.createElement('script');s.type = 'text/javascript';s.async = true;var theUrl = baseUrl+'serve/v1/coin/chart?fsym=BTC&tsym=USD';s.src = theUrl + ( theUrl.indexOf('?') >= 0 ? '&' : '?') + 'app=' + appName;embedder.parentNode.appendChild(s);})();"))
#tags$head(tags$script(HTML("function changeColor(x,y){x.style.backgroundColor = y;}")))
tags$script(HTML(type = 'text/javascript', "baseUrl = 'https://widgets.cryptocompare.com/';
var scripts = document.getElementsByTagName('script');
var embedder = scripts[ scripts.length - 1 ];
(function (){
var appName = encodeURIComponent(window.location.hostname);
if(appName==''){appName='local';}
var s = document.createElement('script');
s.type = 'text/javascript';
s.async = true;
var theUrl = baseUrl+'serve/v1/coin/chart?fsym=BTC&tsym=USD';
s.src = theUrl + ( theUrl.indexOf('?') >= 0 ? '&' : '?') + 'app=' + appName;
embedder.parentNode.appendChild(s);
})();"))
)
#Todo lo que se escriba aque se va a completar en la ui en la parte de abajo de ui htmlvideo
#Se pueden devolver todas las cosas que se quieran
#Para devolver muchas cosas se tiene que crear una lista si o si
list(
#tags$head(tags$script(type = "text/javascript", "(function (){baseUrl = 'https://widgets.cryptocompare.com/';var scripts = document.getElementsByTagName('script');var embedder = scripts[ scripts.length - 1 ];var appName = encodeURIComponent(window.location.hostname);if(appName==''){appName='local';}var s = document.createElement('script');s.type = 'text/javascript';s.async = true;var theUrl = baseUrl+'serve/v1/coin/chart?fsym=BTC&tsym=USD';s.src = theUrl + ( theUrl.indexOf('?') >= 0 ? '&' : '?') + 'app=' + appName;embedder.parentNode.appendChild(s);})();"))
#tags$head(tags$script(HTML("function changeColor(x,y){x.style.backgroundColor = y;}")))
tags$script(type = 'text/javascript', "baseUrl = 'https://widgets.cryptocompare.com/';
var scripts = document.getElementsByTagName('script');
var embedder = scripts[ scripts.length - 1 ];
(function (){
var appName = encodeURIComponent(window.location.hostname);
if(appName==''){appName='local';}
var s = document.createElement('script');
s.type = 'text/javascript';
s.async = true;
var theUrl = baseUrl+'serve/v1/coin/chart?fsym=BTC&tsym=USD';
s.src = theUrl + ( theUrl.indexOf('?') >= 0 ? '&' : '?') + 'app=' + appName;
embedder.parentNode.appendChild(s);
})();")
)
#Todo lo que se escriba aque se va a completar en la ui en la parte de abajo de ui htmlvideo
#Se pueden devolver todas las cosas que se quieran
#Para devolver muchas cosas se tiene que crear una lista si o si
list(
#tags$head(tags$script(type = "text/javascript", "(function (){baseUrl = 'https://widgets.cryptocompare.com/';var scripts = document.getElementsByTagName('script');var embedder = scripts[ scripts.length - 1 ];var appName = encodeURIComponent(window.location.hostname);if(appName==''){appName='local';}var s = document.createElement('script');s.type = 'text/javascript';s.async = true;var theUrl = baseUrl+'serve/v1/coin/chart?fsym=BTC&tsym=USD';s.src = theUrl + ( theUrl.indexOf('?') >= 0 ? '&' : '?') + 'app=' + appName;embedder.parentNode.appendChild(s);})();"))
#tags$head(tags$script(HTML("function changeColor(x,y){x.style.backgroundColor = y;}")))
tags$script(type = 'text/javascript', HTML("baseUrl = 'https://widgets.cryptocompare.com/';
var scripts = document.getElementsByTagName('script');
var embedder = scripts[ scripts.length - 1 ];
(function (){
var appName = encodeURIComponent(window.location.hostname);
if(appName==''){appName='local';}
var s = document.createElement('script');
s.type = 'text/javascript';
s.async = true;
var theUrl = baseUrl+'serve/v1/coin/chart?fsym=BTC&tsym=USD';
s.src = theUrl + ( theUrl.indexOf('?') >= 0 ? '&' : '?') + 'app=' + appName;
embedder.parentNode.appendChild(s);
})();"))
)
runApp('html')
runApp('html')
runApp('html')
library(glue)
runApp('html')
runApp('html')
shiny::runApp('html')
myJSON <- fromJSON("C:/Users/frank/OneDrive/CUNEF - MDS/Técnicas de Visualización en DS/Shiny04/html/info.JSON")
library(httr)
library(jsonlite)
myJSON <- fromJSON("C:/Users/frank/OneDrive/CUNEF - MDS/Técnicas de Visualización en DS/Shiny04/html/info.JSON")
myJSON
myJSON <- fromJSON("C:/Users/frank/OneDrive/CUNEF - MDS/Técnicas de Visualización en DS/Shiny04/html/info.JSON")
myJSON
myJSON$widget$debug
myJSON <- fromJSON("C:/Users/frank/OneDrive/CUNEF - MDS/Técnicas de Visualización en DS/Shiny04/html/info.JSON")
myJSON <- fromJSON("C:/Users/frank/OneDrive/CUNEF - MDS/Técnicas de Visualización en DS/Shiny04/html/info.JSON")
myJSON$appinfo$widget$type
myJSON <- fromJSON("C:/Users/frank/OneDrive/CUNEF - MDS/Técnicas de Visualización en DS/Shiny04/html/info.JSON")
myJSON$appinfo$widget$mainUrl
library(jsonlite)
myJSON <- fromJSON("C:/Users/frank/OneDrive/CUNEF - MDS/Técnicas de Visualización en DS/Shiny04/html/info.JSON")
runApp('html')
runApp('html')
runApp('html')
runApp('html')
myJSON <- fromJSON("C:/Users/frank/OneDrive/CUNEF - MDS/Técnicas de Visualización en DS/Shiny04/html/info.JSON")
myJSON <- fromJSON("C:/Users/frank/OneDrive/CUNEF - MDS/Técnicas de Visualización en DS/Shiny04/html/info.JSON")
runApp('html')
runApp('html')
runApp('html')
runApp('html')
myJSON <- fromJSON("C:/Users/frank/OneDrive/CUNEF - MDS/Técnicas de Visualización en DS/Shiny04/html/info.JSON")
runApp('html')
runApp('html')
myJSON <- fromJSON("C:/Users/frank/OneDrive/CUNEF - MDS/Técnicas de Visualización en DS/Shiny04/html/info.JSON")
runApp('html')
myJSON <- fromJSON("C:/Users/frank/OneDrive/CUNEF - MDS/Técnicas de Visualización en DS/Shiny04/html/info.JSON")
chartAdvanced <- myJSON$appinfo$themes$advanced
runApp('html')
runApp('html')
shiny::runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
install.packages("shinymaterial")
shiny::runApp('dashboard')
shiny::runApp('marta')
runApp('marta')
runApp('marta')
runApp('marta')
runApp('marta')
runApp('marta')
runApp('dashboard')
runApp('dashboard')
runApp('dashboard')
runApp('marta')
library(shiny)
